diff --git a/src/win32/cairo-win32-font.c b/src/win32/cairo-win32-font.c
index 1599b07..9c5d8fc 100644
--- a/src/win32/cairo-win32-font.c
+++ b/src/win32/cairo-win32-font.c
@@ -299,6 +299,53 @@ _get_system_quality (void)
     }
 }
 
+#ifndef MONITOR_DPI_TYPE
+typedef enum MONITOR_DPI_TYPE {
+    MDT_EFFECTIVE_DPI = 0,
+    MDT_ANGULAR_DPI   = 1,
+    MDT_RAW_DPI       = 2,
+    MDT_DEFAULT       = MDT_EFFECTIVE_DPI
+} MONITOR_DPI_TYPE;
+#endif
+
+typedef HRESULT(WINAPI *t_GetDpiForMonitor)(HMONITOR           hmonitor,
+                                            MONITOR_DPI_TYPE   dpi_type,
+                                            UINT              *dpi_x,
+                                            UINT              *dpi_y);
+
+static t_GetDpiForMonitor p_GetDpiForMonitor = NULL;
+
+static BOOL CALLBACK
+get_first_monitor_scale_factor (HMONITOR hmonitor,
+                                HDC      hdc,
+                                LPRECT   rect,
+                                LPARAM   data)
+{
+    UINT dpi_x, dpi_y;
+    double *scale = (double *)data;
+
+    if (!p_GetDpiForMonitor) {
+        p_GetDpiForMonitor = (t_GetDpiForMonitor)GetProcAddress (GetModuleHandleA ("user32.dll"), "GetDpiForMonitorInternal");
+    }
+
+    if (p_GetDpiForMonitor != NULL) {
+        p_GetDpiForMonitor (hmonitor, MDT_EFFECTIVE_DPI, &dpi_x, &dpi_y);
+        *scale = ((double)dpi_x) / 96.0f;
+    }
+
+    return FALSE;
+}
+
+static double
+_win32_get_system_scale_factor (void)
+{
+    double scale = 1.0;
+
+    EnumDisplayMonitors (NULL, NULL, get_first_monitor_scale_factor, (LPARAM)&scale);
+
+    return scale;
+}
+
 /* If face_hfont is non-%NULL then font_matrix must be a simple scale by some
  * factor S, ctm must be the identity, logfont->lfHeight must be -S,
  * logfont->lfWidth, logfont->lfEscapement, logfont->lfOrientation must
@@ -379,6 +426,16 @@ _win32_scaled_font_create (LOGFONTW                   *logfont,
     /* don't delete the hfont if we're using the one passed in to us */
     f->delete_scaled_hfont = !f->scaled_hfont;
 
+    /*
+     * TODO: This really shouldn't be getting the system scale, it should be
+     * the device-scale that is configured on the surface. But I don't know
+     * how to get to that from here.
+     */
+     double system_scale = _win32_get_system_scale_factor ();
+
+     cairo_matrix_scale (font_matrix, 1.0 / system_scale, 1.0 / system_scale);
+     cairo_matrix_scale (ctm, system_scale, system_scale);
+
     cairo_matrix_multiply (&scale, font_matrix, ctm);
     status = _compute_transform (f, &scale);
     if (status)
